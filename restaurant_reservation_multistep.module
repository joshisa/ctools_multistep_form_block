<?php

/**
 * @file
 * This is a basic block module that provides an Ajax dependent dropdown form
 * Author:  joshisa@us.ibm.com
 */

/**
 * Implements hook_block_info().
 */
function restaurant_reservation_multistep_block_info() {
  $blocks = array();
  $blocks['restaurant_reservation_multistep'] = array(
    'info' => t('MultiStep Form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view.
 */
function restaurant_reservation_multistep_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'restaurant_reservation_multistep':
        $block['subject'] = '';
        $block['content'] = _restaurant_reservation_multistep_block_content();
        break;
    default:
        $block['subject'] = '';
        $block['content'] = t('Uh oh! Bullseye\'s designer has gone on vacation!');
  }
  return $block;
}

function _restaurant_reservation_multistep_block_content() {
  // $output = t('Hello World!');
  $cakeform = drupal_get_form('cake_designer_form');
  $output = drupal_render($cakeform);
  return $output;
}

function _first_dropdown_options() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return drupal_map_assoc(
  array(
    t('- Select a value -'),
    t('Sheet'),
    t('Round'),
    t('Pull-Apart Cupcake'),
    t('Dancer'),
    t('Brownie Sandwich'),
  )
  );
}

function _second_dropdown_options($key = '') {
  $options = array(
    t('Sheet') => drupal_map_assoc(
    array(
      t('1/4 (16-24 people)'),
      t('1/2 (32-48 people)'),
      t('Full (64-96 people)'),
    )
    ),
    t('Dancer') => drupal_map_assoc(
    array(
      t('1/4 (16-24 people)'),
      t('1/2 (32-48 people)'),
      t('Full (64-96 people)'),
    )
    ),
    t('Round') => drupal_map_assoc(
    array(
      t('Single Layer (6-10 people)'),
      t('Double Layer (8-12 people)'),
    )
    ),
    t('Pull-Apart Cupcake') => drupal_map_assoc(
    array(
      t('Six (6)'),
      t('Twelve (12)'),
      t('Twenty-Four (24)'),
    )
    ),
    t('Brownie Sandwich') => drupal_map_assoc(
    array(
      t('Six (6)'),
      t('Twelve (12)'),
      t('Twenty-Four (24)'),
    )
    ),
  );
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array(t('-- Select Cake Size --'));
  }
}

function _third_dropdown_options($key = '') {
  $options = array(
    t('Sheet') => drupal_map_assoc(
    array(
      t('White'),
      t('Chocolate'),
      t('Marble'),
      t('Yellow'),
      t('Red Velvet')
    )
    ),
    t('Dancer') => drupal_map_assoc(
    array(
      t('White'),
      t('Chocolate'),
      t('Marble'),
      t('Yellow'),
      t('Red Velvet')
    )
    ),
    t('Round') => drupal_map_assoc(
    array(
      t('White'),
      t('Chocolate'),
      t('Marble'),
      t('Red Velvet')
    )
    ),
    t('Pull-Apart Cupcake') => drupal_map_assoc(
    array(
      t('White'),
      t('Chocolate'),
      t('Variety'),
    )
    ),
    t('Brownie Sandwich') => drupal_map_assoc(
    array(
      t('White'),
      t('Chocolate'),
      t('Variety'),
    )
    ),
  );
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
}

function _fourth_dropdown_options($key = '') {
  $options = array(
    t('Sheet') => drupal_map_assoc(
    array(
      t('Bavarian Cream'),
      t('Raspberry'),
      t('Lemon'),
      t('Cherry'),
      t('Chocolate'),
      t('Cream Cheese'),
      t('Strawberry'),
      t('White'),
    )
    ),
    t('Dancer') => drupal_map_assoc(
    array(
      t('Bavarian Cream'),
      t('Raspberry'),
      t('Lemon'),
      t('Chocolate'),
      t('White'),
    )
    ),
    t('Round') => drupal_map_assoc(
    array(
      t('Bavarian Cream'),
      t('Raspberry'),
      t('Lemon'),
      t('Cherry'),
      t('Chocolate'),
      t('Cream Cheese'),
      t('Strawberry'),
      t('White'),
    )
    ),
    t('Pull-Apart Cupcake') => drupal_map_assoc(
    array(
      t('N/A'),
    )
    ),
    t('Brownie Sandwich') => drupal_map_assoc(
    array(
      t('Vanilla Ice Cream'),
      t('Vanilla Yogurt'),
      t('Chocolate Vanilla Swirl'),
      t('Strawberry Ice Cream'),
      t('French Vanilla Ice Cream'),
    )
    ),
  );
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
}

function _fifth_dropdown_options() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return drupal_map_assoc(
  array(
    t('White Icing (Ask about other colors)'),
    t('Chocolate Icing'),
    t('Whipped Topping'),
    t('Cream Cheese Icing'),
  )
  );
}

function _sixth_dropdown_options() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return drupal_map_assoc(
  array(
    t('Character Design'),
    t('Theme Design'),
  )
  );
}


function cake_designer_form($form, $form_state) {
  $options_first = _first_dropdown_options();
  // If we have a value for the first dropdown from $form_state['values'] we use
  // this both as the default value for the first dropdown cake_type and also as a
  // parameter to pass to the function that retrieves the options for the
  // second dropdown.

  $selected = isset($form_state['values']['cake_type']) ? $form_state['values']['cake_type'] : key($options_first);
 
  $form['cake_type'] = array(
    '#type' => 'select',
    '#title' => t('Cake Type'),
    '#required' => TRUE,
    '#options' => $options_first,
    '#default_value' => t('- Select a value -'),
    // Bind an ajax callback to the change event (which is the default for the
    // select form type) of the first dropdown. It will replace the second
    // dropdown when rebuilt.
    '#ajax' => array(
      // When 'event' occurs, Drupal will perform an ajax request in the
      // background. Usually the default value is sufficient (eg. change for
      // select elements), but valid values include any jQuery event,
      // most notably 'mousedown', 'blur', and 'submit'.
      // 'event' => 'change',
      'callback' => 'restaurant_reservation_multistep_cake_type_callback',
      'wrapper' => 'cake-size-replace',
    ),
  );

  if (isset($form_state['values']['cake_type'])) {
      $form['cake_size'] = array(
        '#type' => 'select',
        '#title' => t('Cake') . ' ' . t('Size'),
        // The entire enclosing div created here gets replaced when cake_type
        // is changed.
        '#prefix' => '<div id="cake-size-replace">',
        '#suffix' => '</div>',
        // When the form is rebuilt during ajax processing, the $selected variable
        // will now have the new value and so the options will change.
        '#options' => isset($form_state['values']['cake_type']) ? _second_dropdown_options($selected) : '',
        '#default' => 0,
        '#ajax' => array(
          // When 'event' occurs, Drupal will perform an ajax request in the
          // background. Usually the default value is sufficient (eg. change for
          // select elements), but valid values include any jQuery event,
          // most notably 'mousedown', 'blur', and 'submit'.
          // 'event' => 'change',
          'callback' => 'restaurant_reservation_multistep_cake_size_callback',
          'wrapper' => 'cake-flavors-replace',
        ),
      );
  }

  $form['cake_flavors'] = array(
    '#type' => 'select',
    '#title' => t('Cake') . ' ' . t('Flavor'),
    // The entire enclosing div created here gets replaced when cake_type
    // is changed.
    '#prefix' => '<div id="cake-flavors-replace">',
    '#suffix' => '</div>',
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => isset($form_state['values']['cake_size']) ? _third_dropdown_options($selected) : '',
    '#default' => 0,
  );

  /*
  $form['cake_fillings'] = array(
    '#type' => 'select',
    '#title' => t('Available') . ' ' . $options_first[$selected] . ' ' . t('Cake') . ' ' . t('Fillings'),
    // The entire enclosing div created here gets replaced when cake_type
    // is changed.
    '#prefix' => '<div id="react-to-cake-type-change">',
    '#suffix' => '</div>',
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => isset($form_state['values']['cake_type']) ? _fourth_dropdown_options($selected) : '',
    '#default_value' => isset($form_state['values']['cake_fillings']) ? $form_state['values']['cake_fillings'] : '',
  );

  $form['cake_icings'] = array(
    '#type' => 'select',
    '#title' => t('Available') . ' ' . $options_first[$selected] . ' ' . t('Cake') . ' ' . t('Icings'),
    // The entire enclosing div created here gets replaced when cake_type
    // is changed.
    '#prefix' => '<div id="react-to-cake-type-change">',
    '#suffix' => '</div>',
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => _fifth_dropdown_options($selected),
    '#default_value' => isset($form_state['values']['cake_icings']) ? $form_state['values']['cake_icings'] : '',
  );

  $form['cake_designs'] = array(
    '#type' => 'select',
    '#title' => t('Available') . ' ' . $options_first[$selected] . ' ' . t('Cake') . ' ' . t('Designs'),
    // The entire enclosing div created here gets replaced when cake_type
    // is changed.
    '#prefix' => '<div id="react-to-cake-type-change">',
    '#suffix' => '</div>',
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => _sixth_dropdown_options($selected),
    '#default_value' => isset($form_state['values']['cake_designs']) ? $form_state['values']['cake_designs'] : '',
  );
  */

  return $form;
}

function restaurant_reservation_multistep_cake_type_callback($form, $form_state) {
  return $form['cake_size'];
}

function restaurant_reservation_multistep_cake_size_callback($form, $form_state) {
  $commands[] = ajax_command_insert('#cake-flavors-replace', drupal_render($form['cake_flavors']));
  return array('#type' => 'ajax', '#commands' => $commands);
}
